box-sizing: 规定两个并排的带边框的框 设为Flex布局以后，子元素的float、clear和vertical-align属性将失效。
            content-box;  宽度和高度分别应用到元素的内容框。 在宽度和高度之外绘制元素的内边距和边框。
            border-box;  为元素设定的宽度和高度决定了元素的边框盒 就是说，为元素指定的任何内边距和边框都将在已设定的宽度和高度内进行绘制。 通过从已设定的宽度和高度分别减去边框和内边距才能得到内容的宽度和高度。
            inherit;  从父元素继承 box-sizing 属性的值

设为Flex布局以后，子元素的float、clear和vertical-align属性将失效。
vertical-align 属性设置元素的垂直对齐方式
clear 属性规定元素的哪一侧不允许其他浮动元素。
float 属性定义元素在哪个方向浮动。


flex-direction:  容器内元素的排列方向(默认横向排列)
                row; 沿水平主轴让元素从左向右排列  1-2-3
                column; 让元素沿垂直主轴从上到下垂直排列  1|2|3
                row-reverse;沿水平主轴让元素从右向左排列  3-2-1
flex-wrap: 容器内元素的换行(默认不换行)
                nowrap; (默认)元素不换行,比如：一个div宽度100%，设置此属性，2个div宽度就自动变成各50%；
                wrap; 元素换行,比如：一个div宽度100%，设置此属性，第二个div就在第二行了；
justify-content: 元素在主轴（页面）上的排列
                center;元素在主轴（页面）上居中排列  - -1-2-3- -  这里的空格表示居中
                flex-start;元素在主轴（页面）上由左或者上开始排列  1-2-3----
                flex-end;元素在主轴（页面）上由右或者下开始排列   ----1-2-3
                space-between;元素在主轴（页面）上左右两端或者上下两端开始排列  1- -2- -3
                space-around;每个元素两侧的间隔相等。所以，元素之间的间隔比元素与边框的间隔大一倍。- -1- -2- -3- -
align-items 元素在主轴（页面）当前行的横轴（纵轴）方向上的对齐方式
                flex-start; 弹性盒子元素的侧轴（纵轴）起始位置的边界紧靠住该行的侧轴起始边界（靠上对齐）。123---上
                flex-end; 弹性盒子元素的侧轴（纵轴）起始位置的边界紧靠住该行的侧轴结束边界。（靠下对齐）  123---下
                center; 弹性盒子元素在该行的侧轴（纵轴）上居中放置。（居中对齐）   123---中
                baseline; 如弹性盒子元素的行内轴与侧轴为同一条，则该值与'flex-start'等效。其它情况下，该值将参与基线对齐。（靠上对齐）
align-content 在弹性容器内的元素没有占用交叉轴上所有可用的空间时对齐容器内的各项（垂直）
                flex-start; 元素位于容器的开头。各行向弹性盒容器的起始位置堆叠。 1|2|3---  从上往下
                flex-end; 元素位于容器的结尾。各行向弹性盒容器的结尾位置堆叠。   ---1|2|3  从下往上
                stretch; 元素位于容器的中心。各行向弹性盒容器的中间位置堆叠。  - 1|2|3 -
                center; 默认值。元素被拉伸以适应容器。各行将会伸展以占用剩余的空间。如果剩余的空间是负数，该值等效于'flex-start'。 1|- -2- -|3 --
                space-between;元素位于各行之间留有空白的容器内。各行在弹性盒容器中平均分布。1|- -2- -|3
                space-around;元素位于各行之前、之间、之后都留有空白的容器内。各行在弹性盒容器中平均分布，两端保留子元素与子元素之间间距大小的一半。如果剩余的空间是负数或弹性盒容器中只有一行，该值等效于'center'。 上下全都是等距的意思咯


justify-content: center; :居中排列
justify-content: flex-start; /* 从行首起始位置开始排列 /
justify-content: flex-end; / 从行尾位置开始排列 */

background:url(img_flwr.gif);
background-size:80px 60px;  属性规定背景图像的尺寸。cover把背景图像扩展至足够大，以使背景图像完全覆盖背景区域。
background-repeat:no-repeat;

flex 属性是 flex-grow、flex-shrink 和 flex-basis 属性的简写属性。
默认值：	0 1 auto
flex: flex-grow flex-shrink flex-basis|auto|initial|inherit;
flex-grow	一个数字，规定项目将相对于其他灵活的项目进行扩展的量。
flex-shrink	一个数字，规定项目将相对于其他灵活的项目进行收缩的量。
flex-basis	项目的长度。合法值："auto"、"inherit" 或一个后跟 "%"、"px"、"em" 或任何其他长度单位的数字。
auto	与 1 1 auto 相同。
none	与 0 0 auto 相同。



##############################################################################################################################
浮动、定位、盒模型

盒模型由元素的内容、内边距、边框、外边距组成
背景会应用于由内容和内边距组成的区域
外边距，一般用来控制元素之间的间隔。而且外边距会叠加，这个是什么逻辑，取其中的较大者

可视化格式模型 - 定位模型
p、h1、div常称为块级元素。这意味着这些元素显示为一块内容，叫内块。而span等元素称为行内元素。叫行内框
设置display:block可以使元素表现的像块级元素一样。通过display:none则使元素根本没有框，也就是不显示该元素

3中基本定位机制：普通流、浮动流、绝对定位

block：普通流中元素框的位置由元素在html中的位置决定。块级框从上到下一个接一个的垂直排列，框之间的垂直距离由框的垂直外边距计算出来。
行内框在一行中水平排列。可以修改水平外边距、边框和外边距调整他们的水平间距，但不影响行框的高。
inline-block：声明元素像行内元素一样水平的依次排列，但是框的内容依然符合块级框的行为。

position:relative 相对定位：对一个元素进行相对定位，他将出现在它所在的位置上，然后可以通过设置垂直或水平位置，让这个元素相对于他的起点移动。
使用相对定位，无论是否移动，元素仍将占据原来的空间，因此移动元素会导致它覆盖其他的框。
比如使用行内框排列，再使用相对定位，我们在原来排列的基础上，对某些元素进行相对的偏移，但是可能会覆盖其他的框

position:absolute 绝对定位：实际上是普通定位模型中的一部分，因为元素的位置是相对于在普通流中的位置的。与之相反，绝对定位使用元素的位置与文档流文官，因此不暂居空间，普通文档流中其他元素的布局就像绝对定位的元素不存在一样
比如使用行内框排列的时候，中间元素使用绝对定位，那么此元素就会被额外挖出来，原来的行内框就好像根本不存在此元素一样，而绝对定位的框，直接布局。
绝对定位的元素的位置是相对于距离它最近的那个已定位的祖先元素确定的，如果没有已定位祖先元素，name他的位置是相对于初始包含块的

此处需要好好理解相对定位于绝对定位的使用方式
固定定位：使得元素总是保持在窗口的某一个位置。属于绝对定位的一种，差异是固定元素的包含块是视口。

浮动：浮动框，会使得当前布局中的目标框不存在一般，往右则会挖出，往左则会覆盖。所有的元素往左浮动，则元素会往左排列。
一般来说，浮动元素脱离文档流，不再影响不浮动的元素。实际上，若浮动元素后面有一个文档流的元素，那么此元素的框会表现的像浮动根本不存在一般，会兼容。或者说，浮动元素旁边的行边框被缩短，从而给浮动元素流出空间。
因此行边框围绕浮动框。阻止这种行为可以使用clear属性，他表示那些边不应该挨着浮动框

当我们想把一张图片和一段文字装在另一个具有背景颜色和边框的元素中。我们可以对图片和文本使用浮动元素，一个左一个右，但是这样会出现问题，因为浮动元素不占据空间。此时父类div会是一行空，无法显示出浮动效果。此时我们可以在对吼一行添加空元素，然后使用clear对它进行清理即可。



### 背景图片如何使用：###
background-image: url(/img/test.gif)  # 默认浏览器会水平和垂直的重复显示背景图像，让图像平铺在整个页面上。我们可以选择垂直、水平平铺，或者根本不平铺
background-repeat: repeat-x  # 在页面上应用垂直渐变，创建一个很高很窄的渐变图片?
background-color:
background-position: left center  /  0 50%
background: color url repeat x y

:link  未被访问的
:visited  已被访问的
:hover  :focus  :active
默认是有下划线的
text-decoration: none;
text-decoration: underline;

box-reflect


固定宽度、流式、弹性布局
所有宽度都以像素为单位，称为固定宽度的布局


