function removeTransition(e) {
    if (e.propertyName !== 'transform') return;
    e.traget.classList.remove('playing');
}

function palySound(e) {
    const audio = document.querySelector(`audio[data-key="${e.keyCode}"]`);
    const key = document.querySelector(`div[data=key="${e.keyCode}"]`);
    if (!audio) return;
    key.classList.add('playing');
    audio.currentTime = 0;
    audio.play();
}

const keys = Array.from(document.querySelectorAll('.key'));
keys.forEach(key => key.addEventListener('transitionend', removeTransition))
window.addEventListener('keydown', palySound)

/*
从逻辑上来看，倒是简单。定义两个方法，一个用于添加palying样式，并触发音效的开始，另一个则是移除相关的css样式
这两个都对某些事件进行了监听
一个是对键盘的keydown进行监听，然后触发添加事件
一个对transform的结束事件进行监听，一旦结束，立即执行响应动作
*/

/*
document.querySelector(`audio[data-key="e.keyCode"]`)  //查询某一个dom节点
document.querySelectorAll(`div[data-key="${e.keyCode}"]`)  // 查询所有相关的dom节点
key.classList.add('playing')  // 为某个节点添加css样式
key.target.classList.remove('playing')  // 移除相关css样式
audio.currentTime = 0  // 媒体播放时间初始化
audio.play()  // 媒体开始播放
window.addEventListener  // 添加监听事件
*/
